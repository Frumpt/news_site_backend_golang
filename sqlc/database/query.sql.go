// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"NewsBack/internal/domain"
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, name, password, user_role_id
) VALUES (
             $1, $2, $3, $4
         )
    RETURNING id, user_role_id, name, password
`

type CreateUserParams struct {
	ID         int
	Name       string
	Password   string
	UserRoleID int
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (domain.User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Password,
		arg.UserRoleID,
	)
	var i domain.User
	err := row.Scan(
		&i.ID,
		&i.UserRoleID,
		&i.Name,
		&i.Password,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec

WITH rows AS (
DELETE FROM users
WHERE id = $1
RETURNING *
)
SELECT count(*) FROM rows;
`

func (q *Queries) DeleteUser(ctx context.Context, id int) (int64, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var rows int64
	err := row.Scan(&rows)
	return rows, err
}

const getUser = `-- name: GetUser :one
SELECT id, user_role_id, name, password FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int) (domain.User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i domain.User
	err := row.Scan(
		&i.ID,
		&i.UserRoleID,
		&i.Name,
		nil,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, user_role_id, name, password FROM users
ORDER BY name
`

func (q *Queries) GetUsers(ctx context.Context) ([]domain.User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []domain.User
	for rows.Next() {
		var i domain.User
		if err := rows.Scan(
			&i.ID,
			&i.UserRoleID,
			&i.Name,
			nil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
