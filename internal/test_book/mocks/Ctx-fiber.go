// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	"context"
	"crypto/tls"
	"github.com/gofiber/fiber/v3"
	mock "github.com/stretchr/testify/mock"
	"github.com/valyala/fasthttp"
	"io"
	"mime/multipart"
)

type FiberCtxMock interface {
	Params(string) string
	SendStatus(int) error
	SendString(string) error
	// добавьте другие методы, которые вы хотите использовать
}

// DB is an autogenerated mock type for the DB type
type MockFiberCtx struct {
	mock.Mock
}

func (m MockFiberCtx) Accepts(offers ...string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) AcceptsCharsets(offers ...string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) AcceptsEncodings(offers ...string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) AcceptsLanguages(offers ...string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) App() *fiber.App {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Append(field string, values ...string) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Attachment(filename ...string) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) BaseURL() string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) BodyRaw() []byte {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) tryDecodeBodyInOrder(originalBody *[]byte, encodings []string) ([]byte, uint8, error) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Body() []byte {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) ClearCookie(key ...string) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Context() *fasthttp.RequestCtx {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) UserContext() context.Context {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) SetUserContext(ctx context.Context) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Cookie(cookie *fiber.Cookie) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Cookies(key string, defaultValue ...string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Download(file string, filename ...string) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Request() *fasthttp.Request {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Response() *fasthttp.Response {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Format(handlers ...fiber.ResFmt) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) AutoFormat(body any) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) FormFile(key string) (*multipart.FileHeader, error) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) FormValue(key string, defaultValue ...string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Fresh() bool {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Get(key string, defaultValue ...string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) GetRespHeader(key string, defaultValue ...string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) GetRespHeaders() map[string][]string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) GetReqHeaders() map[string][]string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Host() string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Hostname() string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Port() string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) IP() string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) extractIPsFromHeader(header string) []string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) extractIPFromHeader(header string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) IPs() []string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Is(extension string) bool {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) JSON(data any, ctype ...string) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) JSONP(data any, callback ...string) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) XML(data any) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Links(link ...string) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Locals(key any, value ...any) any {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Location(path string) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Method(override ...string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) MultipartForm() (*multipart.Form, error) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) ClientHelloInfo() *tls.ClientHelloInfo {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Next() error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) RestartRouting() error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) OriginalURL() string {
	//TODO implement me
	panic("implement me")
}

//func (m MockFiberCtx) Params(key string, defaultValue ...string) string {
//	//TODO implement me
//	panic("implement me")
//}

func (m MockFiberCtx) Path(override ...string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Scheme() string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Protocol() string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Query(key string, defaultValue ...string) string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Queries() map[string]string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Range(size int) (fiber.Range, error) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Redirect() *fiber.Redirect {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) ViewBind(vars fiber.Map) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) getLocationFromRoute(route fiber.Route, params fiber.Map) (string, error) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) GetRouteURL(routeName string, params fiber.Map) (string, error) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Render(name string, bind fiber.Map, layouts ...string) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) renderExtensions(bind any) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Route() *fiber.Route {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) SaveFile(fileheader *multipart.FileHeader, path string) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) SaveFileToStorage(fileheader *multipart.FileHeader, path string, storage fiber.Storage) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Secure() bool {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Send(body []byte) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) SendFile(file string, config ...fiber.SendFile) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) SendStream(stream io.Reader, size ...int) error {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Set(key, val string) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) setCanonical(key, val string) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Subdomains(offset ...int) []string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Stale() bool {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Status(status int) fiber.Ctx {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Type(extension string, charset ...string) fiber.Ctx {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Vary(fields ...string) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Write(p []byte) (int, error) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Writef(f string, a ...any) (int, error) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) WriteString(s string) (int, error) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) XHR() bool {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) configDependentPaths() {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) IsProxyTrusted() bool {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) isLocalHost(address string) bool {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) IsFromLocal() bool {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Bind() *fiber.Bind {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Reset(fctx *fasthttp.RequestCtx) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) release() {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) getMethodINT() int {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) getIndexRoute() int {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) getTreePath() string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) getDetectionPath() string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) getPathOriginal() string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) getValues() *[30]string {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) getMatched() bool {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) setIndexHandler(handler int) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) setIndexRoute(route int) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) setMatched(matched bool) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) setRoute(route *fiber.Route) {
	//TODO implement me
	panic("implement me")
}

func (m MockFiberCtx) Params(str string) string {
	_ = str
	args := m.Called()
	return args.String(0)
}

func (m MockFiberCtx) SendStatus(status int) error {
	_ = status
	args := m.Called()
	return args.Error(0)
}

func (m MockFiberCtx) SendString(str string) error {
	_ = str
	args := m.Called()
	return args.Error(0)
}
